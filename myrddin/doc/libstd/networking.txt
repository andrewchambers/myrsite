{
        title: Networking
        description:    libstd: Networking
}
Networking
----------

    pkg std =
            type rectype = union
                    `DnsA	/* host address */
                    `DnsNS	/* authoritative name server */
                    `DnsCNAME	/* canonical name for an alias */
                    `DnsSOA	/* marks the start of a zone of authority */
                    `DnsWKS	/* well known service description */
                    `DnsPTR	/* domain name pointer */
                    `DnsHINFO	/* host information */
                    `DnsMINFO	/* mailbox or mail list information */
                    `DnsMX	/* mail exchange */
                    `DnsTXT	/* text strings */
                    `DnsAAAA	/* ipv6 host address */
            ;;

            type resolveerr = union
                    `Badhost
                    `Badsrv
                    `Badquery
                    `Badresp
            ;;

            type hostinfo = struct
                    fam	: sys.sockfam
                    stype	: sys.socktype
                    ttl	: uint32
                    addr	: netaddr
            ;;

            type netaddr = union
                    `Ipv4	byte[4]
                    `Ipv6	byte[16]
            ;;


            /* network connections */
            const dial	: (dialstr : byte[:] -> result(fd, byte[:]))
            const resolve	: (host : byte[:]	-> result(hostinfo[:], resolveerr))
            const resolvemx	: (host : byte[:]	-> result(hostinfo[:], resolveerr))
            const resolverec	: (host : byte[:], t : rectype	-> result(hostinfo[:], resolveerr))

            /* ip parsing */
            const ipparse	: (ip : byte[:]	-> option(netaddr))
            const ip4parse	: (ip : byte[:] -> option(netaddr))
            const ip6parse	: (ip : byte[:] -> option(netaddr))

            generic hosttonet	: (v : @a -> @a)
            generic nettohost	: (v : @a -> @a)
    ;;

Summary
-------

This group of functions contains the networking functionality
provided by libstd.

The bulk of the functionality is fairly low level. Most of the
client side networking should be done using nothing more than
`dial`.

Dial describes the endpoint to connect to in the form
`proto!host!service`. `proto` can be any supported protocol.
The host specified can be an IP address, hostname, or path to
a local socket. The service ismay be either a named service, or
a protocol specific port. If the port is not a component of the
address (eg, Unix domain sockets) then it should be ommitted.

On plan 9, the full dial(2) dial string syntax is suported.

Data Types
----------

    type rectype = union
            `DnsA	/* host address */
            `DnsNS	/* authoritative name server */
            `DnsCNAME	/* canonical name for an alias */
            `DnsSOA	/* marks the start of a zone of authority */
            `DnsWKS	/* well known service description */
            `DnsPTR	/* domain name pointer */
            `DnsHINFO	/* host information */
            `DnsMINFO	/* mailbox or mail list information */
            `DnsMX	/* mail exchange */
            `DnsTXT	/* text strings */
            `DnsAAAA	/* ipv6 host address */
    ;;

This union contains all of the record types that we claim to know how to
resolve. At the moment, few of them have been tested sufficiently (only A
records can reasonably be said to be exercised).

    type resolveerr = union
            `Badhost
            `Badsrv
            `Badquery
            `Badresp
    ;;

This union contains the errors that we can encounter when trying to resolve a
host.

    type hostinfo = struct
            fam	: sys.sockfam
            stype	: sys.socktype
            ttl	: uint32
            addr	: netaddr
    ;;

This contains the infomation that we extract by resolving a host.

    type ipaddr = union
            `Ipv4	byte[4]
            `Ipv6	byte[16]
    ;;

This contains an IP address. Either V4 or V6 is supported.

Connections
----------

    const dial	: (dialstr : byte[:] -> result(fd, byte[:]))

Dial connects to a dial string as described in the summary, returning either a
file descriptor on success, or an error description on failure. The FD
returned is a connection to the server.

IP Parsing
----------

    const ipparse	: (ip : byte[:]	-> option(netaddr))

Ipparse will parse an IP address. This will recognize either V4 or V6
addresses, and `\`Some \`Ipv4 bits or `\`Some \`Ipv6 bits` as appropriate, or
`\`None` if the address can't be parsed.

    const ip4parse	: (ip : byte[:] -> option(netaddr))

Parses an Ipv4 address from the string `ip`. The syntax expected is dotted
quad notation. Returns `\` Some \`Ipv4 bits` if the address parses successfully, or
`\`None` if parsing fails.

    const ip6parse	: (ip : byte[:] -> option(netaddr))

Parses an Ipv6 address from the string `ip`. Returns `\` Some \`Ipv4 bits` if
the address parses successfully, or `\`None` if parsing fails. Zones are
currently not supported. This is a bug.


DNS Resolution
--------------

    const resolve	: (host : byte[:]	-> result(hostinfo[:], resolveerr))

Resolves the A or AAAA record for the host `host` using DNS. This function
does caching, expiring based on the TTL. Returns all of the host info entries sent
back by DNS or found in the cache on success, or a resolve error on failure.

    const resolvemx	: (host : byte[:]	-> result(hostinfo[:], resolveerr))

Resolves the MX record for the host `host` using DNS. This function does
caching, expiring based on the TTL. Returns all of the host info entries sent
back by DNS or found in the cache on success, or a resolve error on failure.

    const resolverec	: (host : byte[:], t : rectype	-> result(hostinfo[:], resolveerr))

Resolves a record from DNS. This function's interface is slightly broken, as
it will never work for TXT or CNAME records.


Endian flipping
--------------

    generic hosttonet	: (v : @a -> @a)
    generic nettohost	: (v : @a -> @a)


Flips the bits in an integer to match the expected. These functions should be
avoided in favor of explicit packing functions.
